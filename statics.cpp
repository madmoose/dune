/* ScummVM - Graphic Adventure Engine
 *
 * ScummVM is the legal property of its developers, whose names
 * are too numerous to list here. Please refer to the COPYRIGHT
 * file distributed with this source distribution.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 */

#include "dune/dune.h"

#include "dune/statics.h"

namespace Dune {

const int16_t Subs::irulan[] = { 119, 137, 138, 173, 186, 238, 248, 269, 270, 305, 314, 338, 348, 358, 360, 388, 389, 415, 425, 460, 470, 518, 528, 571, 576, 604, 605, 659, 660, 685, 693, 744, 746, 757, 761, 818, 827, 866, 875, 945, 950, 1000, 1012, 1042, 1044, 1075, 1085, 1119, 1120, 1142, 1147, 1169, 1172, 1214, 1226, 1259, 1266, 1285, 1294, 1315, -1 };

const byte Cursor::Pointer[] = {
	// Hotspot Y
	0x00, 0x00,

	// Hotspot X
	0x00, 0x00,

	// Mask Black (bit 0 -> black)
	0xFF, 0x3F, 0xFF, 0x1F, 0xFF, 0x0F, 0xFF, 0x07,
	0xFF, 0x03, 0xFF, 0x01, 0xFF, 0x00, 0x7F, 0x00,
	0x3F, 0x00, 0x3F, 0x00, 0xFF, 0x01, 0xFF, 0x10,
	0xFF, 0x30, 0x7F, 0xF8, 0x7F, 0xF8, 0x7F, 0xFC,

	// Mask White (bit 1 -> white)
	0x00, 0x00, 0x00, 0x40, 0x00, 0x60, 0x00, 0x70,
	0x00, 0x78, 0x00, 0x7C, 0x00, 0x7E, 0x00, 0x7F,
	0x80, 0x7F, 0x00, 0x7C, 0x00, 0x6C, 0x00, 0x46,
	0x00, 0x06, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00
};

const byte Cursor::Hand[] = {
	// Hotspot Y
	0x01, 0x00,

	// Hotspot X
	0x00, 0x00,

	// Mask Black (bit 0 -> black)
	0xFF, 0xCF, 0xFF, 0x83, 0xFF, 0x81, 0x7F, 0xE0,
	0x3F, 0xF0, 0x07, 0xC0, 0x03, 0xC0, 0x03, 0x80,
	0x01, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0xC0,
	0x00, 0xE0, 0x00, 0xF0, 0x00, 0xFC, 0x00, 0xFF,

	// Mask White (bit 1 -> white)
	0x00, 0x00, 0x00, 0x30, 0x00, 0x1C, 0x00, 0x06,
	0x80, 0x03, 0x00, 0x0D, 0xF8, 0x16, 0xD8, 0x19,
	0x3C, 0x6C, 0xAC, 0x30,	0xBC, 0x03, 0xDE, 0x1F,
	0xFE, 0x0F, 0xBE, 0x03, 0x7E, 0x00, 0x7E, 0x00,
};

const byte Cursor::North[] = {
	// Hotspot Y
	0x04, 0x00,

	// Hotspot X
	0x00, 0x00,

	// Mask Black (bit 0 -> black)
	0xFF, 0xFB, 0xFF, 0xF1, 0xFF, 0xE0, 0x7F, 0xC0,
	0x3F, 0x80, 0x1F, 0x00, 0x1F, 0x00, 0xFF, 0xE0,
	0xFF, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

	// Mask White (bit 1 -> white)
	0x00, 0x00, 0x00, 0x04, 0x00, 0x0E, 0x00, 0x1F,
	0x80, 0x3F, 0xC0, 0x7F, 0x00, 0x0E, 0x00, 0x0E,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const byte Cursor::East[] = {
	// Hotspot Y
	0x04, 0x00,

	// Hotspot X
	0x02, 0x00,

	// Mask Black (bit 0 -> black)
	0xFF, 0xCF, 0xFF, 0xC7, 0xFF, 0xC3, 0xFF, 0x01,
	0xFF, 0x00, 0x7F, 0x00, 0xFF, 0x00, 0xFF, 0x01,
	0xFF, 0xC3, 0xFF, 0xC7, 0xFF, 0xCF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

	// Mask White (bit 1 -> white)
	0x00, 0x00, 0x00, 0x10, 0x00, 0x18, 0x00, 0x1C,
	0x00, 0x7E, 0x00, 0x7F, 0x00, 0x7E, 0x00, 0x1C,
	0x00, 0x18, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const byte Cursor::South[] = {
	// Hotspot Y
	0x04, 0x00,

	// Hotspot X
	0x00, 0x00,

	// Mask Black (bit 0 -> black)
	0xFF, 0xE0, 0xFF, 0xE0, 0x1F, 0x00, 0x1F, 0x00,
	0x3F, 0x80, 0x7F, 0xC0, 0xFF, 0xE0, 0xFF, 0xF1,
	0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

	// Mask White (bit 1 -> white)
	0x00, 0x00, 0x00, 0x0E, 0x00, 0x0E, 0xC0, 0x7F,
	0x80, 0x3F, 0x00, 0x1F, 0x00, 0x0E, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const byte Cursor::West[] = {
	// Hotspot Y
	0x05, 0x00,

	// Hotspot X
	0x02, 0x00,

	// Mask Black (bit 0 -> black)
	0xFF, 0xF9, 0xFF, 0xF1, 0xFF, 0xE1, 0x7F, 0xC0,
	0x7F, 0x80, 0x7F, 0x00, 0x7F, 0x80, 0x7F, 0xC0,
	0xFF, 0xE1, 0xFF, 0xF1, 0xFF, 0xF9, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

	// Mask White (bit 1 -> white)
	0x00, 0x00, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x1C,
	0x00, 0x3F, 0x00, 0x7F, 0x00, 0x3F, 0x00, 0x1C,
	0x00, 0x0C, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

} // End of namespace Dune
